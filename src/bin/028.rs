// Spiral numbers
//
// 1x1: 1
// 3x3: +2: 3, 5, 7, 9
// 5x5: + 4: 13, 17, 21, 25
// 7x7: + 6: 31, 37, 43, 49
// Each row can be generated by n^2, then subtracting n-1 3 times.
//
// This way, don't have to iterate from the beginning and keep track of
// how to increment each n correctly
//
// Ha, Haskell version is just one function (recursive), but
// Rust is still faster, 0 to 0.4
// Implementation between two is similar, except Haskell generates a
// lazy list.

fn spiral_sum(n: usize) -> usize {
    if n == 1 {
        return 1;
    }

    (0..n.pow(2))
        .rev()
        .step_by(1 * (n-1))
        .take(4)
        .fold(0, |sum, x| {
            sum + (x as usize)
        })

}

fn main() {
    let res: usize = (1..1002).step_by(2)
        .map(|n| spiral_sum(n))
        .sum();
    println!("sum of spiral numbers to 1001x1001: {}", res);
}
